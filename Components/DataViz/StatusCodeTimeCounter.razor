@using System.Timers
@using ShiftWorx.Components.Methods
@inject FpData _context;
<MudCard Class="mb-2">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Name</MudText>
            <MudText>@Description</MudText>
            <MudText Typo="Typo.h3">@elapsedTime</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton OnClick="StopJob" Icon="@Icons.Material.Rounded.Close" Color="MudBlazor.Color.Default" />
        </CardHeaderActions>
    </MudCardHeader>
</MudCard>

@code {

    public const string DEFAULT_TIME = "00:00:00";
    public string elapsedTime = DEFAULT_TIME;
    System.Timers.Timer timer = new System.Timers.Timer(1000);
    [Parameter]
    public int AttachedTime { get; set; }
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public string JobId { get; set; }
    [Parameter]
    public string Description { get; set; }
    [Parameter]
    public StatusCodesCardComponent Parent { get; set; }
    [Parameter]
    public bool isRunning { get; set; } = false;
    DateTime startTime;
    protected override async Task OnInitializedAsync()
    {
        startTime = DateTimeOffset.FromUnixTimeSeconds(AttachedTime).DateTime.ToLocalTime();
        StartTimer();
    }
    void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        DateTime currentTime = e.SignalTime;
        TimeSpan CurrentTimeSpan = currentTime.Subtract(startTime);
        elapsedTime = $"{currentTime.Subtract(startTime).ToString(@"hh\:mm\:ss")}";
        if (CurrentTimeSpan.TotalDays >= 1)
        {
            elapsedTime = CurrentTimeSpan.Days + " Days " + elapsedTime;
        }
        else
        {
            elapsedTime = $"{currentTime.Subtract(startTime).ToString(@"hh\:mm\:ss")}";
        }

        this.InvokeAsync(() => this.StateHasChanged());
    }

    void StartTimer()
    {
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
        isRunning = true;
    }
    public void StopJob()
    {
        Parent.RefreshState();
    }
}








