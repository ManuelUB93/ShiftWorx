@using ApexCharts
@using ShiftWorx.Components.Methods
@inject FpData _context;
<PageTitle>Shiftworx v1</PageTitle>

<MudPaper Class="pa-3 mb-2" >
    <ApexChart @ref=chart TItem="TimeRangeData"
               Options=options
               XAxisType="XAxisType.Datetime">
        <ApexPointTooltip>
            <div class="m-2">
                @{
                    var point = (ListPoint<TimeRangeData>)context.DataPoint;
                    <h3>@point.X</h3>
                    <span class="me-1">Start Date:@point.Items.First().TimeStart.ToString("D")</span>
                    <span class="me-1">End Date:@point.Items.First().TimeEnd.ToString("D") </span>
                    <br />
                    <span class="me-1">Start Time:@point.Items.First().TimeStart.ToString("T")</span>
                    if (point.Items.First().TimeEnd < DateTime.UtcNow.AddMinutes(-1))
                    {
                        <span class="me-1">End Time:@point.Items.First().TimeEnd.ToString("T")</span>
                    }
                    else
                    {
                        <span class="me-1">End Time:<span class="text-bg-danger">Active</span></span>
                    }
                }
            </div>
        </ApexPointTooltip>
        <ChildContent>
            <ApexRangeSeries TItem="TimeRangeData"
                             Items="Jobs"
                             XValue="@(e => e.Name)"
                             YMinValue="@(e =>e.TimeStart.ToUnixTimeMilliseconds())"
                             YMaxValue="@(e =>e.TimeEnd.ToUnixTimeMilliseconds())" />
        </ChildContent>
    </ApexChart>
</MudPaper>

@code {

    DateRange _dateRange { get; set; } = new(DateTime.UtcNow.AddDays(-1), DateTime.UtcNow.AddMinutes(30));
    [Parameter]
    public string? fpid { get; set; }
    [Parameter]
    public string? MachineName { get; set; }
    private ApexChart<TimeRangeData> chart;
    private List<TimeRangeData> Jobs { get; set; } = new();
    private ApexChartOptions<TimeRangeData> options;
    protected override void OnInitialized()
    {
        GetData();
        options = new ApexChartOptions<TimeRangeData>
            {

                PlotOptions = new PlotOptions
                {


                    Bar = new PlotOptionsBar
                    {

                        Horizontal = true
                    }
                }

            };
        options.Chart = new()
            {
                Height = 150,
                Animations = new()
                {
                    Enabled = false,
                },
                Toolbar = new()
                {
                    Tools = new()
                    {
                        Zoom = false,
                        Selection = false

                    },
                    Show = false
                },
                Brush = new()
                {
                    Enabled = false
                }

            };
        options.Yaxis = new List<YAxis>();
        options.Yaxis.Add(new YAxis
            {
                Min = DateTime.UtcNow.AddHours(-4).AddDays(-1).ToUnixTimeMilliseconds(),
                Max = DateTime.UtcNow.AddHours(-4).AddMinutes(5).ToUnixTimeMilliseconds()
            });


    }

    public async Task UpdateChart()
    {
        await GetData();
        await chart.RenderAsync();
    }

    public async Task GetData()
    {
        var test1 = DateTime.UtcNow.AddDays(-1);
        var test2 = DateTime.UtcNow.AddMinutes(30);

        long StartDate = DateTime.UtcNow.AddDays(-1).ToUnixTimeMilliseconds() / 1000;
        long EndDate = DateTime.UtcNow.AddMinutes(30).ToUnixTimeMilliseconds() / 1000;

        if (test1 != null && test2 != null)
        {
            if (_dateRange.Start.Value == _dateRange.End.Value)
            {
                _dateRange.End = _dateRange.End.Value.AddHours(23).AddMinutes(59).AddSeconds(59);
            }
            StartDate = _dateRange.Start.Value.ToUnixTimeMilliseconds() / 1000;
            EndDate = _dateRange.End.Value.ToUnixTimeMilliseconds() / 1000;
        }
        Jobs.Clear();
        var BluebarData2 = await _context.GetBlueBar(fpid, StartDate.ToString(), EndDate.ToString());
        TimeRangeData Job2 = new TimeRangeData();
        bool checkforpass2 = true;
        if (BluebarData2.data != null)
        {
            if (BluebarData2.data.state_mask.Count >= 1)
            {
                var lastitem = BluebarData2.data.state_mask.Last();
                var firstitem = BluebarData2.data.state_mask.First();
                foreach (var item in BluebarData2.data.state_mask)
                {
                    if (item.Equals(firstitem))
                    {
                        if (item.y == 0)
                        {
                            continue;
                        }
                    }

                    if (item.y != 0)
                    {
                        Job2 = new();
                        Job2.Name = MachineName;
                        Job2.TimeStart = DateTimeOffset.FromUnixTimeSeconds(item.x).DateTime.AddHours(-4);
                        if (item.Equals(lastitem))
                        {
                            if (item.y != 0)
                            {
                                Job2.TimeEnd = DateTime.UtcNow.AddHours(-4);
                                Jobs.Add(Job2);
                            }
                        }
                        continue;
                    }
                    else
                    {
                        Job2.TimeEnd = DateTimeOffset.FromUnixTimeSeconds(item.x).DateTime.AddHours(-4);
                    }

                    Jobs.Add(Job2);

                }
            }
        }
    }
}



